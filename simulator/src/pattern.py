class Pattern:
    """
    Base class for pattern generation
    """
    def __init__(self, minimum: float, maximum: float, name: str):
        """
        initializes the pattern object
        :param minimum: minimum value generated by pattern
        :param maximum: maximum value generated by pattern
        """
        self.min = minimum
        self.max = maximum
        self.name = name


    # def generate_points(self, count):
    #     pass


class Random(Pattern):
    """
    class for generation of random pattern within a given range
    """
    def __init__(self, minimum: float, maximum: float):
        """
        initializes the pattern object        
        :param minimum: minimum value generated by pattern
        :param maximum: maximum value generated by pattern
        """
        super().__init__(minimum, maximum, 'random')

    def generate_points(self, count):
        pass


# class State(Pattern):
#     def __init__(self, ingestion_rate_gb_per_hour, time_of_day_hhmmss: str):
#         super().__init__(minimum=ingestion_rate_gb_per_hour, maximum=ingestion_rate_gb_per_hour)
#         self.time_of_day_hhmmss = time_of_day_hhmmss


class Fixed(Pattern):
    def __init__(self, point, time_of_day_hh_mm_ss):
        super().__init__(point, point, 'fixed')
        self.time_of_day_hh_mm_ss = time_of_day_hh_mm_ss


class SawTooth(Pattern):
    """
    class for generating sawtooth pattern
    """
    def __init__(self, minimum: float, maximum: float, minimum_time: str, maximum_time: str):
        """
        initializes the pattern object
        
        :param minimum: minimum value generated by pattern
        :param maximum: maximum value generated by pattern
        :param minimum_time: time of occurrence of minimum
        :param maximum_time: time of occurrence of maximum
        """
        super().__init__(minimum, maximum, 'sawtooth')
        self.minimum_time = minimum_time
        self.maximum_time = maximum_time
    
    # TODO: raise Error for aliasing conditions 

    def _sawtooth_generator(self):
        pass

    def generate_points(self, count, duration):
        pass
